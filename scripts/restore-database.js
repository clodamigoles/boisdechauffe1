// Script de restauration de la base de donn√©es
// Usage: node scripts/restore-database.js <backup-file>

import { DatabaseUtils } from '../lib/mongodb.js'
import fs from 'fs/promises'
import path from 'path'

async function restoreDatabase(backupFile) {
    try {
        console.log('üîÑ D√©marrage de la restauration de la base de donn√©es...')

        // V√©rifier que le fichier existe
        const backupPath = path.isAbsolute(backupFile)
            ? backupFile
            : path.join(process.cwd(), 'backups', backupFile)

        try {
            await fs.access(backupPath)
        } catch {
            console.error(`‚ùå Fichier de sauvegarde non trouv√©: ${backupPath}`)
            process.exit(1)
        }

        // Lire le fichier de sauvegarde
        console.log(`üìñ Lecture du fichier: ${backupPath}`)
        const backupContent = await fs.readFile(backupPath, 'utf8')
        const backupData = JSON.parse(backupContent)

        console.log(`üìÖ Sauvegarde cr√©√©e le: ${backupData.timestamp}`)
        console.log(`üì¶ Version: ${backupData.version}`)

        // Demander confirmation (en mode interactif)
        if (process.stdout.isTTY) {
            console.log('‚ö†Ô∏è  ATTENTION: Cette op√©ration va remplacer toutes les donn√©es existantes!')
            console.log('   Appuyez sur Ctrl+C pour annuler, ou sur Entr√©e pour continuer...')

            // Attendre l'entr√©e utilisateur
            process.stdin.setRawMode(true)
            process.stdin.resume()
            await new Promise((resolve) => {
                process.stdin.once('data', () => {
                    process.stdin.setRawMode(false)
                    process.stdin.pause()
                    resolve()
                })
            })
        }

        console.log('üßπ Nettoyage des collections existantes...')

        // Nettoyer les collections existantes
        const collections = Object.keys(backupData.collections)
        for (const collectionName of collections) {
            try {
                await DatabaseUtils.deleteMany(collectionName, {})
                console.log(`   ‚úÖ Collection ${collectionName} nettoy√©e`)
            } catch (error) {
                console.log(`   ‚ö†Ô∏è Erreur lors du nettoyage de ${collectionName}:`, error.message)
            }
        }

        console.log('üì• Restauration des donn√©es...')

        // Restaurer chaque collection
        for (const [collectionName, data] of Object.entries(backupData.collections)) {
            if (!Array.isArray(data) || data.length === 0) {
                console.log(`   ‚è≠Ô∏è Collection ${collectionName} vide, ignor√©e`)
                continue
            }

            try {
                // Nettoyer les donn√©es (supprimer les champs auto-g√©n√©r√©s)
                const cleanData = data.map(doc => {
                    const { _id, ...cleanDoc } = doc
                    return cleanDoc
                })

                const result = await DatabaseUtils.insertMany(collectionName, cleanData)
                console.log(`   ‚úÖ Collection ${collectionName}: ${result.insertedCount} documents restaur√©s`)
            } catch (error) {
                console.log(`   ‚ùå Erreur lors de la restauration de ${collectionName}:`, error.message)
            }
        }

        console.log('üîß Mise √† jour des compteurs...')

        // Mettre √† jour les compteurs de produits dans les cat√©gories
        try {
            const categories = await DatabaseUtils.findMany('categories', {})
            for (const category of categories) {
                const productCount = await DatabaseUtils.count('products', {
                    categoryId: category._id,
                    isActive: true
                })

                await DatabaseUtils.updateOne(
                    'categories',
                    { _id: category._id },
                    { $set: { productCount } }
                )
            }
            console.log('   ‚úÖ Compteurs de produits mis √† jour')
        } catch (error) {
            console.log('   ‚ö†Ô∏è Erreur lors de la mise √† jour des compteurs:', error.message)
        }

        console.log('‚úÖ Restauration termin√©e avec succ√®s!')

        // Afficher un r√©sum√©
        console.log('üìä R√©sum√© de la restauration:')
        for (const [collectionName, data] of Object.entries(backupData.collections)) {
            const count = Array.isArray(data) ? data.length : 0
            console.log(`   - ${collectionName}: ${count} documents`)
        }

    } catch (error) {
        console.error('‚ùå Erreur lors de la restauration:', error)
        process.exit(1)
    }
}

// Fonction pour valider un fichier de sauvegarde
async function validateBackup(backupFile) {
    try {
        console.log('üîç Validation du fichier de sauvegarde...')

        const backupPath = path.isAbsolute(backupFile)
            ? backupFile
            : path.join(process.cwd(), 'backups', backupFile)

        const backupContent = await fs.readFile(backupPath, 'utf8')
        const backupData = JSON.parse(backupContent)

        // V√©rifications de base
        const requiredFields = ['timestamp', 'version', 'collections']
        for (const field of requiredFields) {
            if (!(field in backupData)) {
                console.log(`‚ùå Champ manquant: ${field}`)
                return false
            }
        }

        console.log(`‚úÖ Fichier valide`)
        console.log(`   üìÖ Date: ${backupData.timestamp}`)
        console.log(`   üì¶ Version: ${backupData.version}`)
        console.log(`   üìã Collections:`)

        for (const [collection, data] of Object.entries(backupData.collections)) {
            const count = Array.isArray(data) ? data.length : 0
            console.log(`      - ${collection}: ${count} documents`)
        }

        return true

    } catch (error) {
        console.error('‚ùå Fichier de sauvegarde invalide:', error.message)
        return false
    }
}

// Fonction pour cr√©er une sauvegarde avant restauration
async function createBackupBeforeRestore() {
    const timestamp = new Date().toISOString().replace(/[:.]/g, '-')
    const filename = `pre-restore-backup-${timestamp}.json`

    console.log('üíæ Cr√©ation d\'une sauvegarde de s√©curit√©...')

    const { backupDatabase } = await import('./backup-database.js')
    await backupDatabase(filename)

    console.log(`‚úÖ Sauvegarde de s√©curit√© cr√©√©e: ${filename}`)
}

// Ex√©cuter le script
const command = process.argv[2]
const backupFile = process.argv[3]

if (!backupFile && command !== 'help') {
    console.log('‚ùå Fichier de sauvegarde requis')
    console.log('Usage: node scripts/restore-database.js <backup-file>')
    console.log('       node scripts/restore-database.js validate <backup-file>')
    console.log('       node scripts/restore-database.js help')
    process.exit(1)
}

switch (command) {
    case 'validate':
        validateBackup(backupFile)
        break
    case 'help':
        console.log('üîÑ Script de restauration de base de donn√©es')
        console.log('')
        console.log('Usage:')
        console.log('  node scripts/restore-database.js <backup-file>     # Restaurer depuis un fichier')
        console.log('  node scripts/restore-database.js validate <file>   # Valider un fichier de sauvegarde')
        console.log('  node scripts/restore-database.js help              # Afficher cette aide')
        console.log('')
        console.log('Exemples:')
        console.log('  node scripts/restore-database.js backup-2024-01-15.json')
        console.log('  node scripts/restore-database.js validate daily-backup-2024-01-15.json')
        break
    default:
        // Par d√©faut, consid√©rer le premier argument comme le fichier √† restaurer
        const fileToRestore = command

        if (process.stdout.isTTY) {
            await createBackupBeforeRestore()
        }

        await restoreDatabase(fileToRestore)
}

export { restoreDatabase, validateBackup, createBackupBeforeRestore }